{"version":3,"file":"parser.module.js","sources":["../src/errors.ts","../src/parser.ts"],"sourcesContent":["export const GLOBALS: {\n  [key: string]: string;\n} = {\n  FILENAME: '.salte-ci.yml',\n};\n\nexport class ParsingException extends Error {\n  public code: ParsingException.Codes;\n\n  constructor({ message, code }: ParsingException.Options) {\n    super(message.replace(/{{(\\w+)}}/g, (match: string, name: string) => {\n      return GLOBALS[name.toUpperCase()] || match;\n    }));\n\n    this.code = code;\n  }\n}\n\nexport declare namespace ParsingException {\n  type Codes = ('malformed_yaml'|'invalid_property_type');\n  type Options = {\n    message: string;\n    code: Codes;\n  };\n}\n","import YAML from 'yaml';\nimport outdent from 'outdent';\nimport { Raw, Parsed } from './types';\nimport { ParsingException } from './errors';\n\n\n/**\n *\n * @param yaml - the yaml to parse.\n */\nexport function parse(yaml: string): Parsed {\n  const output = YAML.parse(yaml) as Raw;\n\n  if (!output || typeof(output) !== 'object' || Array.isArray(output)) {\n    throw new ParsingException({\n      message: outdent`\n        Expected \"{{filename}}\" match the following format.\n\n        image: node:alpine\n        steps:\n          - npm i\n      `,\n      code: 'malformed_yaml',\n    });\n  }\n\n  const { image, steps } = output;\n\n  if (typeof(image) !== 'string') {\n    throw new ParsingException({\n      message: 'The \"image\" property must be a string.',\n      code: 'invalid_property_type',\n    });\n  }\n\n  if (!Array.isArray(steps)) {\n    throw new ParsingException({\n      message: 'The \"steps\" property must be a list.',\n      code: 'invalid_property_type',\n    });\n  }\n\n  if (steps.length === 0) {\n    throw new ParsingException({\n      message: `The \"steps\" property can't be empty.`,\n      code: 'invalid_property_type',\n    });\n  }\n\n  return {\n    image,\n    steps,\n  };\n}\n"],"names":["GLOBALS","FILENAME","ParsingException","Error","constructor","message","code","replace","match","name","toUpperCase","parse","yaml","output","YAML","Array","isArray","outdent","image","steps","length"],"mappings":";;;AAAO,MAAMA,OAAO,GAEhB;AACFC,EAAAA,QAAQ,EAAE;AADR,CAFG;MAMMC,yBAAyBC;AAGpCC,EAAAA,YAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX;AACV,UAAMD,OAAO,CAACE,OAAR,CAAgB,YAAhB,EAA8B,CAACC,KAAD,EAAgBC,IAAhB;AAClC,aAAOT,OAAO,CAACS,IAAI,CAACC,WAAL,EAAD,CAAP,IAA+BF,KAAtC;AACD,KAFK,CAAN;AAIA,SAAKF,IAAL,GAAYA,IAAZ;AACD;;;;ACTH;;;;;AAIA,SAAgBK,MAAMC;AACpB,QAAMC,MAAM,GAAGC,IAAI,CAACH,KAAL,CAAWC,IAAX,CAAf;;AAEA,MAAI,CAACC,MAAD,IAAW,OAAOA,MAAP,KAAmB,QAA9B,IAA0CE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAA9C,EAAqE;AACnE,UAAM,IAAIX,gBAAJ,CAAqB;AACzBG,MAAAA,OAAO,EAAEY;;;;;;OADgB;AAQzBX,MAAAA,IAAI,EAAE;AARmB,KAArB,CAAN;AAUD;;AAED,QAAM;AAAEY,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBN,MAAzB;;AAEA,MAAI,OAAOK,KAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAIhB,gBAAJ,CAAqB;AACzBG,MAAAA,OAAO,EAAE,wCADgB;AAEzBC,MAAAA,IAAI,EAAE;AAFmB,KAArB,CAAN;AAID;;AAED,MAAI,CAACS,KAAK,CAACC,OAAN,CAAcG,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAIjB,gBAAJ,CAAqB;AACzBG,MAAAA,OAAO,EAAE,sCADgB;AAEzBC,MAAAA,IAAI,EAAE;AAFmB,KAArB,CAAN;AAID;;AAED,MAAIa,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAM,IAAIlB,gBAAJ,CAAqB;AACzBG,MAAAA,OAAO,wCADkB;AAEzBC,MAAAA,IAAI,EAAE;AAFmB,KAArB,CAAN;AAID;;AAED,SAAO;AACLY,IAAAA,KADK;AAELC,IAAAA;AAFK,GAAP;AAID;;;;"}